{"version":3,"sources":["components/CalendarCurrentDate.jsx","components/CalendarField.jsx","arraySlicer.js","components/Calendar.jsx","App.js","serviceWorker.js","index.js"],"names":["CalendarCurrentDate","props","currentDate","console","log","className","format","toUpperCase","slice","String","replace","CalendarField","locale","cloneDate","moment","days","startOf","subtract","push","Date","reverse","dayInMonth","daysInMonth","i","add","endOf","monnthAsWeeks","array","result","length","splice","arraySlicer","weekDays","isoWeekday","map","day","index","nameOfDay","key","week","getMonth","toString","getDate","getDay","Number","Calendar","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c39c8b6d.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function CalendarCurrentDate(props) {\n    const {currentDate} = props;\n    console.log(props);\n    return (\n        <>\n            <div className=\"ui-datepicker-material-header\">\n                <div className=\"ui-datepicker-material-day\">{currentDate.format('dddd')[0].toUpperCase() + currentDate.format('dddd').slice(1)}</div>\n                <div className=\"ui-datepicker-material-date\">\n                    <div className=\"ui-datepicker-material-day-num\">{currentDate.format('DD')}</div>\n                    <div className=\"ui-datepicker-material-month\">{String(currentDate.format('DD MMMM')).replace(/\\d/g, '')}</div>\n                    <div className=\"ui-datepicker-material-year\">{currentDate.format('YYYY')}</div>\n                </div>\n            </div>\n            <div className=\"ui-datepicker-header\">\n                <div className=\"ui-datepicker-title\">\n                    <span className=\"ui-datepicker-month\">{currentDate.format(\"MMMM\")[0].toUpperCase() + currentDate.format(\"MMMM\").slice(1) }</span>&nbsp;<span className=\"ui-datepicker-year\">{currentDate.format('YYYY')}</span>\n                </div>\n            </div>\n            </>\n    );\n}\n","import React from \"react\";\nimport moment from \"moment\";\nimport arraySlicer from '../arraySlicer'\n\nexport default function CalendarField(props) {\n    const {currentDate} = props;\n    currentDate.locale('en');\n    let cloneDate = moment(currentDate);\n    const days = [];\n    if(String(cloneDate.startOf('month').format('dddd')) !== 'Monday') {\n        console.log('месяц начинается не с понедельника');\n        cloneDate.locale('en');\n        cloneDate.startOf('month');\n        while (cloneDate.format('dddd') !== 'Monday') {\n            cloneDate.subtract(1,'day');\n            days.push(new Date(cloneDate.format(\"YYYY-MM-DD\")));\n            days.reverse();\n        }\n\n    }\n    cloneDate = moment(currentDate).startOf(\"month\");\n    console.log(cloneDate.format('DD MM YYYY'));\n    const dayInMonth = cloneDate.daysInMonth();\n    for(let i = 1; i <= dayInMonth; i++ ) {\n        days.push(new Date(cloneDate.format(\"YYYY-MM-DD\")));\n        cloneDate.add(1,'day');\n\n    }\n    cloneDate.endOf('month');\n    while (cloneDate.format('dddd') !== 'Tuesday') {\n        cloneDate.add(1,'day');\n        days.push(new Date(cloneDate.format(\"YYYY-MM-DD\")));\n\n    }\n    const monnthAsWeeks = arraySlicer(days);\n    const weekDays = [];\n    for(let i = 1; i <= 7; i++) {\n        weekDays.push(moment().isoWeekday(i).format('dd'));\n    }\n    return(\n        <table className= 'ui-datepicker-calendar'>\n            <colgroup>\n            {weekDays.map((day,index) => {\n                if(index === 5 || index === 6) {\n                    return <col className='ui-datepicker-week-end'/>\n                } else {\n                    return <col/>\n                }\n            })}\n            </colgroup>\n        <thead>\n        <tr>\n            {weekDays.map(nameOfDay => <td key={nameOfDay}>{nameOfDay}</td>)}\n        </tr>\n        </thead>\n            <tbody>\n            {monnthAsWeeks.map((week, index) => <tr key={index} className='week'>\n                {week.map(function (day) {\n                    if (day.getMonth() !== new Date(currentDate.format(\"YYYY-MM-DD\")).getMonth()) {\n                        return <td key={day.toString()} className='ui-datepicker-other-month'>{day.getDate()}</td>\n                    } else if(day.getDay() === 0 || day.getDay() === 6) {\n                        return <td key={day.toString()} className='ui-datepicker-week-end'>{day.getDate()}</td>\n                    } else if (day.getDate() === Number(currentDate.format(\"DD\")) && day.getMonth() + 1 === Number(currentDate.format('MM'))) {\n                        return <td key={day.toString()} className='ui-datepicker-today'>{day.getDate()}</td>\n                    } else {\n                        return <td key={day.toString()}>{day.getDate()}</td>\n\n                    }\n                })}\n            </tr>)}\n            </tbody>\n        </table>\n)\n\n}\n","export default function arraySlicer(array) {\n    const result = [];\n    const length = 7;\n    while(array.length) result.push(array.splice(0,length));\n    return result;\n}\n","import React from \"react\";\nimport CalendarCurrentDate from './CalendarCurrentDate';\nimport CalendarField from './CalendarField';\n\n\nexport default function Calendar(props) {\n    return (\n        <div className=\"ui-datepicker\">\n        <CalendarCurrentDate currentDate={props.currentDate}/>\n        <CalendarField currentDate={props.currentDate}/>\n        </div>\n);\n\n}\n","import React from 'react';\nimport './App.css';\nimport './css/main.css';\nimport moment from \"moment\";\nimport 'moment/locale/ru';\nimport Calendar from './components/Calendar'\nfunction App() {\n  let currentDate = moment(\"2017-03-08\", \"YYYY-MM-DD\");\n  currentDate.locale('ru');\n\n  return (\n    <Calendar currentDate = {currentDate} />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}